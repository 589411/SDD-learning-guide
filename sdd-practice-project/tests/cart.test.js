/**
 * 購物車功能測試（練習專案）
 * 
 * 📝 練習任務：
 * 1. 根據 specs/cart.spec.md 完成所有測試案例
 * 2. 確保測試描述清楚易懂
 * 3. 使用適當的 expect 斷言
 * 4. 測試要涵蓋所有場景（正常、異常、邊界）
 * 
 * 💡 提示：
 * - 先讓測試失敗（紅燈）
 * - 再實作功能讓測試通過（綠燈）
 * - 最後重構改善程式碼
 */

const { 
  createCart,
  // TODO: 從 src/cart.js 匯入其他需要的函數
} = require('../src/cart');

describe('購物車功能測試', () => {
  
  // ✅ 場景一：加入商品到購物車
  describe('加入商品到空購物車', () => {
    test('應該能將第一個商品加入空購物車', () => {
      // TODO: 實作此測試
      // 1. 建立空購物車
      // 2. 加入一個商品
      // 3. 驗證購物車狀態
      
      const cart = createCart();
      const product = {
        id: 'prod_001',
        name: 'iPhone 15',
        price: 30000
      };
      
      cart.addItem(product, 1);
      
      expect(cart.getItems()).toHaveLength(1);
      expect(cart.getTotalAmount()).toBe(30000);
      // 補充更多斷言...
    });

    test('應該正確記錄商品資訊', () => {
      // TODO: 實作此測試
    });

    test('應該正確計算小計和總金額', () => {
      // TODO: 實作此測試
    });
  });

  // ➕ 場景二：增加相同商品的數量
  describe('增加相同商品數量', () => {
    test('加入相同商品時應該累加數量而不是新增項目', () => {
      // TODO: 實作此測試
      // 提示：
      // 1. 加入商品 A，數量 1
      // 2. 再次加入商品 A，數量 2
      // 3. 驗證商品 A 的數量是 3，而不是有兩個商品 A
    });

    test('累加後應該重新計算金額', () => {
      // TODO: 實作此測試
    });
  });

  // 🛍️ 場景三：加入多種不同商品
  describe('加入多種不同商品', () => {
    test('應該能加入多種不同商品', () => {
      // TODO: 實作此測試
    });

    test('應該正確計算多商品總金額', () => {
      // TODO: 實作此測試
      // 提示：使用具體的商品和價格進行測試
      // 例如：iPhone 15 (30000) + AirPods Pro (7000*2) + MacBook (50000)
    });
  });

  // 🔢 場景四：調整商品數量
  describe('調整商品數量', () => {
    test('應該能增加商品數量', () => {
      // TODO: 實作此測試
    });

    test('應該能減少商品數量', () => {
      // TODO: 實作此測試
    });

    test('數量變更後應該自動重算金額', () => {
      // TODO: 實作此測試
    });
  });

  // 🗑️ 場景五：移除商品
  describe('移除商品', () => {
    test('應該能移除指定商品', () => {
      // TODO: 實作此測試
    });

    test('移除商品後應該重新計算總金額', () => {
      // TODO: 實作此測試
    });

    test('移除所有商品後購物車應該是空的', () => {
      // TODO: 實作此測試
    });

    test('嘗試移除不存在的商品應該拋出錯誤', () => {
      // TODO: 實作此測試
      // 提示：使用 expect(() => {}).toThrow()
    });
  });

  // ⚠️ 場景六：數量為 0 時自動移除
  describe('數量為 0 的處理', () => {
    test('將數量設為 0 時應該自動移除商品', () => {
      // TODO: 實作此測試
    });
  });

  // 📭 場景七：輸入驗證
  describe('輸入驗證', () => {
    test('負數數量應該拋出錯誤', () => {
      // TODO: 實作此測試
    });

    test('非整數數量應該拋出錯誤', () => {
      // TODO: 實作此測試
    });

    test('缺少商品資訊應該拋出錯誤', () => {
      // TODO: 實作此測試
    });

    test('超過庫存限制應該拋出錯誤', () => {
      // TODO: 實作此測試
      // 提示：商品物件可以包含 stock 屬性
    });
  });

  // 🔢 場景八：計算邏輯
  describe('計算邏輯測試', () => {
    test('應該正確計算商品總數', () => {
      // TODO: 實作此測試
      // 提示：商品 A 有 2 個，商品 B 有 3 個，總數應該是 5
    });

    test('應該正確計算商品種類數', () => {
      // TODO: 實作此測試
      // 提示：3 種不同商品，種類數應該是 3
    });

    test('應該正確計算購物車總金額', () => {
      // TODO: 實作此測試
      // 提示：使用多個商品測試總金額計算
    });

    test('空購物車的總金額應該是 0', () => {
      // TODO: 實作此測試
    });
  });

  // 🧹 場景九：清空購物車
  describe('清空購物車', () => {
    test('應該能清空購物車所有商品', () => {
      // TODO: 實作此測試
    });

    test('清空後所有計算值應該歸零', () => {
      // TODO: 實作此測試
    });

    test('清空後 isEmpty() 應該返回 true', () => {
      // TODO: 實作此測試
    });
  });

  // 🎯 邊界情況測試
  describe('邊界情況測試', () => {
    test('空購物車應該正確處理各種操作', () => {
      // TODO: 實作此測試
    });

    test('單一商品的購物車', () => {
      // TODO: 實作此測試
    });

    test('大量商品的購物車', () => {
      // TODO: 實作此測試
      // 提示：測試 100 種商品
    });

    test('非常大的金額計算', () => {
      // TODO: 實作此測試
      // 提示：測試商品單價 999999999
    });

    test('非常大的數量', () => {
      // TODO: 實作此測試
      // 提示：測試數量 10000
    });
  });

  // 🔐 資料完整性測試
  describe('資料完整性測試', () => {
    test('每次操作後購物車狀態應該一致', () => {
      // TODO: 實作此測試
    });

    test('不應該允許直接修改購物車內部資料', () => {
      // TODO: 實作此測試（進階）
      // 提示：測試 getItems() 返回的是副本而非引用
    });
  });

  // 💡 輔助函數測試（如果有實作）
  describe('輔助函數測試', () => {
    test('calculateSubtotal 應該正確計算小計', () => {
      // TODO: 如果有實作此函數，測試它
    });

    test('validateQuantity 應該正確驗證數量', () => {
      // TODO: 如果有實作此函數，測試它
    });

    test('findItem 應該能找到指定商品', () => {
      // TODO: 如果有實作此函數，測試它
    });
  });
});

// 📝 學習提示：
// 1. 從最簡單的測試開始寫起
// 2. 每完成一個測試就執行 npm test 看結果
// 3. 紅燈（測試失敗）→ 綠燈（測試通過）→ 重構
// 4. 不要一次寫太多測試，逐步完成
// 5. 測試描述要清楚，讓其他人看得懂
// 6. 適當使用 describe 組織測試結構
// 7. 善用 beforeEach 準備測試資料
// 8. 記得測試邊界情況和錯誤處理

// 🎯 完成標準：
// - 所有 TODO 都已完成
// - 所有測試都能通過
// - 測試覆蓋率達到 90% 以上
// - 沒有跳過的測試（no test.skip）
